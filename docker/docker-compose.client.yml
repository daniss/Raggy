# Client-Specific Docker Compose
# This compose file sets up a complete client deployment
# Usage: CLIENT_ID=<client-id> docker-compose -f docker/docker-compose.client.yml up

version: '3.8'

services:
  # Client Application
  rag-app:
    build:
      context: ..
      dockerfile: docker/client.Dockerfile
      args:
        CLIENT_ID: ${CLIENT_ID:-template}
    image: rag-platform-${CLIENT_ID:-template}:latest
    container_name: rag-${CLIENT_ID:-template}
    environment:
      - CLIENT_ID=${CLIENT_ID:-template}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      
      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - DATABASE_URL=${DATABASE_URL:-}
      
      # LLM Provider
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      
      # Redis (optional)
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN:-}
      
      # Deployment Configuration
      - DEPLOYMENT_MODE=${DEPLOYMENT_MODE:-backend}
      - WORKERS=${WORKERS:-2}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
      # CORS Configuration
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000","https://${CLIENT_ID:-template}.yourdomain.com"]}
      
    ports:
      - "${BACKEND_PORT:-8000}:8000"
      - "${FRONTEND_PORT:-3000}:3000"
    
    volumes:
      # Mount client-specific configurations as read-only
      - ../clients/${CLIENT_ID:-template}:/app/clients/${CLIENT_ID:-template}:ro
      
      # Logs directory for persistence
      - ./logs/${CLIENT_ID:-template}:/app/logs
      
      # Optional: Mount additional client assets
      - ../clients/${CLIENT_ID:-template}/assets:/app/static:ro
    
    depends_on:
      - redis
    
    networks:
      - rag-network
    
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT:-4G}
          cpus: '${CPU_LIMIT:-2.0}'
        reservations:
          memory: ${MEMORY_RESERVATION:-2G}
          cpus: '${CPU_RESERVATION:-1.0}'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # Redis Cache (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: redis-${CLIENT_ID:-template}
    command: redis-server --appendonly yes --maxmemory ${REDIS_MEMORY:-512mb} --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    networks:
      - rag-network
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY:-512mb}
          cpus: '0.5'

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: nginx-${CLIENT_ID:-template}
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ../clients/${CLIENT_ID:-template}/assets:/usr/share/nginx/html/assets:ro
    environment:
      - CLIENT_ID=${CLIENT_ID:-template}
      - BACKEND_HOST=rag-app
      - BACKEND_PORT=8000
      - SERVER_NAME=${SERVER_NAME:-localhost}
    depends_on:
      - rag-app
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - production

  # PostgreSQL (for standalone deployments)
  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgres-${CLIENT_ID:-template}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rag_${CLIENT_ID:-template}}
      POSTGRES_USER: ${POSTGRES_USER:-raguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - standalone
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY:-2G}
          cpus: '${POSTGRES_CPU:-1.0}'

  # Monitoring (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-${CLIENT_ID:-template}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-${CLIENT_ID:-template}
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SERVER_DOMAIN=${SERVER_NAME:-localhost}
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis-data:
    name: redis-data-${CLIENT_ID:-template}
  postgres-data:
    name: postgres-data-${CLIENT_ID:-template}
  prometheus-data:
    name: prometheus-data-${CLIENT_ID:-template}
  grafana-data:
    name: grafana-data-${CLIENT_ID:-template}

networks:
  rag-network:
    name: rag-network-${CLIENT_ID:-template}
    driver: bridge