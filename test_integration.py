#!/usr/bin/env python3
"""
Test d'int√©gration pour v√©rifier le syst√®me RAG
Tests basiques sans n√©cessiter de vraies API keys
"""

import os
import sys
import asyncio
import json
import httpx
from pathlib import Path

# Configuration de test (utiliser les vraies variables d'env si disponibles)
TEST_CONFIG = {
    'RAG_BASE_URL': 'http://localhost:8001',
    'SUPABASE_URL': os.getenv('SUPABASE_URL'),
    'SUPABASE_SERVICE_KEY': os.getenv('SUPABASE_SERVICE_KEY'),
    'RAG_MASTER_KEY': os.getenv('RAG_MASTER_KEY'),
    'EMBEDDING_PROVIDER': 'nomic',
    'EMBEDDING_API_KEY': 'test-key',  # Mock pour les tests
    'GENERATION_PROVIDER': 'groq',
    'GROQ_API_KEY': os.getenv('GROQ_API_KEY'),
}

class RAGIntegrationTest:
    def __init__(self):
        self.client = httpx.AsyncClient(timeout=30.0)
        self.passed = 0
        self.failed = 0
    
    async def test_security_module(self):
        """Test du module security sans connexion externe"""
        print("\nüîê Test du module Security...")
        
        try:
            sys.path.insert(0, '/home/danis/code/Raggy/rag-service')
            from security import SecurityManager
            
            # Mock la variable d'environnement
            os.environ['RAG_MASTER_KEY'] = TEST_CONFIG['RAG_MASTER_KEY'] or 'd/KMN8oMNCetr+XV+KifCaNPo5BIckQgk1rojNEh5kE='
            
            sm = SecurityManager()
            
            # Test de chiffrement/d√©chiffrement
            plaintext = "Ceci est un test de chiffrement"
            mock_dek = sm._generate_dek()
            
            encrypted = sm.encrypt_content(plaintext, mock_dek, "test_org|test_doc|0")
            decrypted = sm.decrypt_content(
                encrypted['ciphertext'], 
                encrypted['nonce'], 
                encrypted['aad'], 
                mock_dek
            )
            
            if decrypted == plaintext:
                print("  ‚úÖ Chiffrement/d√©chiffrement: OK")
                self.passed += 1
            else:
                print("  ‚ùå Chiffrement/d√©chiffrement: FAILED")
                self.failed += 1
                
            # Test de hash
            hash1 = sm.hash_content("test")
            hash2 = sm.hash_content("test")
            if hash1 == hash2:
                print("  ‚úÖ Fonction de hachage: OK")
                self.passed += 1
            else:
                print("  ‚ùå Fonction de hachage: FAILED")
                self.failed += 1
            
        except Exception as e:
            print(f"  ‚ùå Module Security: FAILED - {e}")
            self.failed += 1
    
    async def test_providers_imports(self):
        """Test des imports des providers sans connexion"""
        print("\nüì° Test des imports Providers...")
        
        try:
            sys.path.insert(0, '/home/danis/code/Raggy/rag-service')
            from providers import SupabaseProvider, EmbeddingProvider, LLMProvider
            
            print("  ‚úÖ Import SupabaseProvider: OK")
            print("  ‚úÖ Import EmbeddingProvider: OK") 
            print("  ‚úÖ Import LLMProvider: OK")
            self.passed += 3
            
        except Exception as e:
            print(f"  ‚ùå Imports Providers: FAILED - {e}")
            self.failed += 1
    
    async def test_fastapi_endpoints(self):
        """Test des endpoints FastAPI (si le serveur est lanc√©)"""
        print("\nüöÄ Test des endpoints FastAPI...")
        
        try:
            # Test health endpoint
            response = await self.client.get(f"{TEST_CONFIG['RAG_BASE_URL']}/rag/health")
            if response.status_code == 200:
                print("  ‚úÖ Endpoint /rag/health: OK")
                self.passed += 1
            else:
                print(f"  ‚ö†Ô∏è  Endpoint /rag/health: Status {response.status_code}")
                print("     (Serveur FastAPI pas lanc√© - normal pour tests unitaires)")
                
        except httpx.ConnectError:
            print("  ‚ö†Ô∏è  Serveur FastAPI non accessible")
            print("     (Normal si pas lanc√© - pas un √©chec)")
        except Exception as e:
            print(f"  ‚ùå Test FastAPI: FAILED - {e}")
            self.failed += 1
    
    async def test_nextjs_routes(self):
        """Test que les routes Next.js compilent correctement"""
        print("\n‚öõÔ∏è  Test des routes Next.js...")
        
        try:
            # V√©rifier que les fichiers de routes existent et ont la bonne structure
            routes_to_check = [
                '/home/danis/code/Raggy/rag-saas-ui/app/api/rag/ask/route.ts',
                '/home/danis/code/Raggy/rag-saas-ui/app/api/rag/index/route.ts', 
                '/home/danis/code/Raggy/rag-saas-ui/app/api/rag/health/route.ts'
            ]
            
            for route_file in routes_to_check:
                if os.path.exists(route_file):
                    with open(route_file, 'r') as f:
                        content = f.read()
                        if 'RAG_BASE_URL' in content:
                            print(f"  ‚úÖ Route {route_file}: Configur√©e pour FastAPI")
                            self.passed += 1
                        else:
                            print(f"  ‚ùå Route {route_file}: Configuration FastAPI manquante")
                            self.failed += 1
                else:
                    print(f"  ‚ùå Route {route_file}: Fichier manquant")
                    self.failed += 1
            
        except Exception as e:
            print(f"  ‚ùå Test routes Next.js: FAILED - {e}")
            self.failed += 1
    
    async def test_database_migration(self):
        """Test que la migration SQL a √©t√© appliqu√©e"""
        print("\nüóÉÔ∏è  Test de la migration SQL...")
        
        if not TEST_CONFIG['SUPABASE_URL'] or not TEST_CONFIG['SUPABASE_SERVICE_KEY']:
            print("  ‚ö†Ô∏è  Variables Supabase manquantes - skip test DB")
            return
        
        try:
            # Test simple de connexion √† Supabase
            from supabase import create_client
            
            supabase = create_client(
                TEST_CONFIG['SUPABASE_URL'], 
                TEST_CONFIG['SUPABASE_SERVICE_KEY']
            )
            
            # Test que les tables existent
            result = supabase.from_('org_keys').select('*').limit(0).execute()
            print("  ‚úÖ Table org_keys: Existe")
            self.passed += 1
            
            result = supabase.from_('rag_chunks').select('*').limit(0).execute()
            print("  ‚úÖ Table rag_chunks: Existe") 
            self.passed += 1
            
        except Exception as e:
            print(f"  ‚ùå Test migration SQL: FAILED - {e}")
            self.failed += 1
    
    async def run_all_tests(self):
        """Lance tous les tests"""
        print("üîç D√âBUT DES TESTS D'INT√âGRATION RAG")
        print("="*50)
        
        await self.test_security_module()
        await self.test_providers_imports()
        await self.test_nextjs_routes()
        await self.test_database_migration()
        await self.test_fastapi_endpoints()
        
        print("\n" + "="*50)
        print(f"üìä R√âSULTATS: {self.passed} tests pass√©s, {self.failed} √©checs")
        
        if self.failed == 0:
            print("üéâ TOUS LES TESTS SONT PASS√âS !")
            return True
        else:
            print("‚ö†Ô∏è  Certains tests ont √©chou√© - voir d√©tails ci-dessus")
            return False
        
    async def cleanup(self):
        await self.client.aclose()

async def main():
    test = RAGIntegrationTest()
    try:
        success = await test.run_all_tests()
        return 0 if success else 1
    finally:
        await test.cleanup()

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)