[tool:pytest]
# Pytest configuration for Raggy backend testing

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --cov=app
    --cov-branch
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=70

# Test markers
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (may require database, external services)
    slow: Slow tests (may take several seconds)
    demo: Demo flow tests
    purge: Purge functionality tests
    api: API endpoint tests
    rag: RAG pipeline tests
    database: Database-related tests

# Minimum version
minversion = 6.0

# Test session configuration
asyncio_mode = auto

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Ignore warnings from dependencies
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:transformers.*
    ignore::UserWarning:langchain.*
    ignore::FutureWarning:supabase.*

# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */test_*
    */conftest.py
    */venv/*
    */migrations/*
    */__pycache__/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod